# -*- coding: utf-8 -*-
"""
Created on Tue Dec 30 19:29:09 2014

@author: Kapiva90

"""

import numpy as np
from matplotlib import pyplot

# DEFINING A FUNCTION FOR PLOTTING SOLNS RESULTING FROM DIFFERENT dt VALUES
# -------This function needs cleaning, in particular, my idea was to 
#        initialize an array of strings of undefined length, legend_str, with the 
#        first entry being 'Exact Solution'. I then want to extend the 
#        array so that it is of same length as dt_vals + 1 and the i-th entry 
#        holds the string ['Numerical Solution for $\Delta t = $',str(dt_vals[i])]
#        I want to then feed this array to the legend, i.e.: 
#        pyplot.legend(legend_str), is there a nicer way to do this? 
def soln_plotter(t_vals, z_vals, dt_vals, z_exact, style):
    
    # Creating y-limits
    mins = np.zeros([z_vals.shape[0],1])  # allocating memory
    maxs = np.empty_like(mins)
    # Finding minimum and maximum z-values
    for i in range(0, z_vals.shape[0]):
        mins[i] = min(z_vals[i])
        maxs[i] = max(z_vals[i])
        
    pyplot.figure(figsize=(12,6))   #set plot size
    pyplot.ylim(min(mins)-20, max(maxs)+85)          #y-axis plot limits
    pyplot.tick_params(axis='both', labelsize=14) #increase font size for ticks
    pyplot.grid(True) 
    pyplot.xlabel('t', fontsize=14) #x label
    pyplot.ylabel('z', fontsize=14) #y label
    pyplot.plot(t_vals[-1], z_exact, style[0])
    for k in range(0, z_vals.shape[0]):
        pyplot.plot(t_vals[k], z_vals[k], style[k+1])
        
    pyplot.legend(['Exact Solution', \
    'Numerical Solution for $\Delta t = 0.1$',\
    'Numerical Solution for $\Delta t = 0.05$',\
    'Numerical Solution for $\Delta t = 0.01$',\
    'Numerical Solution for $\Delta t = 0.005$',\
    'Numerical Solution for $\Delta t = 0.001$',\
    'Numerical Solution for $\Delta t = 0.0001$'] )

    return 0
# ----------------------------------------------------------------------------#
    
# ------------DEFINING A FUNCTION FOR EULER SOLVER ---------------------------#
  
def euler_soln(T, z0, v, zt, dt_vals):
    """Solves the Phugoid Oscillation 2nd order ODE using Euler's Method

    INPUT
    ----------
    T  : final time in seconds
    z0 : initial altitude
    v  : upward velocity
    zt : trim velocity
    dt_vals : array of float time increments
   

    OUTPUT
    -------
    t_vals : array of partitions of [0, T], with time steps dt_vals[i], resp.
             e.g. t_vals[0] is the partition of [0, T] with time step dt_vals[0] 
    z_vals : array of solutions to the ODE, with time steps dt_vals[i], resp. 
             e.g. z_vals[0] is the solution computed using dt_vals[0]
    """
    g = 9.81
    
    # Allocating memory for t and z values
    z_vals = np.empty_like(dt_vals, dtype = np.ndarray)
    t_vals = np.empty_like(dt_vals, dtype = np.ndarray)
    
    # Computing z values for each dt value
    for i, dt in enumerate(dt_vals): 
        N = int(T/dt) + 1
        t = np.linspace(0.0, T, N)
        z = np.empty_like(t);  # allocating memory
        u = np.array([z0, v])
        z[0] = z0
        for n in range(1,N):
            u = u + dt*np.array([u[1], g*(1-u[0]/zt)])
            z[n] = u[0]
        # Storing results        
        t_vals[i] = t.copy()   
        z_vals[i] = z.copy() 
               
    return t_vals, z_vals 
# ----------------------------------------------------------------------------#
    
# ------------DEFINING A FUNCTION FOR ERROR ESTIMATE -------------------------#    
    
def get_error(T, z0, v, zt, dt_vals, param1, param2, style):
    """Returns the error relative to analytical solution using L-1 norm.

    INPUT
    ----------
    T  : final time in seconds
    z0 : initial altitude
    v  : upward velocity
    zt : trim velocity
    dt_vals : array of float time increments
    param1  : parameter for soln plots, if param = 1 plots are displayed, 
              else it is suppressed
    param2  : parameter for error plot, if param2 = 1 error plot is displayed, 
              else it is suppressed  
    style   : determines the line style of the solution plots; 
              first entry determines style for exact solution
              last entry determines style for error plot

    OUTPUT
    -------
    error_vals : float L_{1} norm of the error with respect to the exact solution.
    """

    g = 9.81
    t_vals, z_vals = euler_soln(T, z0, v, zt, dt_vals)
    z_exact = np.empty_like(dt_vals)
    error_vals = np.empty_like(dt_vals)
    
    for k, dt in enumerate(dt_vals):
        z_exact = v*(zt/g)**.5*np.sin((g/zt)**.5*t_vals[k])+ \
              (z0-zt)*np.cos((g/zt)**.5*t_vals[k])+zt
        error_vals[k] = dt_vals[k] * np.sum(np.abs(z_vals[k]-z_exact))
    
    if param1 == 1:
        soln_plotter(t_vals, z_vals, dt_vals, z_exact, style)
    if param2 == 1:
        pyplot.figure(figsize=(10, 6))
        pyplot.tick_params(axis='both', labelsize=14) #increase tick font size
        pyplot.grid(True)                         #turn on grid lines
        pyplot.xlabel('$\Delta t$', fontsize=16)  #x label
        pyplot.ylabel('Error', fontsize=16)       #y label
        pyplot.loglog(dt_values, error_vals, style[-1])  #log-log plot
        pyplot.axis('equal')

        
    return error_vals
# ----------------------------------------------------------------------------#
    
# ------------------------ TESTING FUNCTIONS ---------------------------------#

T = 100.0
#initial conditions
z0 = 100.     # altitude
v = 10     #upward velocity resulting from gust
zt = 100     
dt_values = np.array([0.1, 0.05, 0.01, 0.005, 0.001, 0.0001]) 
style = np.array(['k','y--', 'r--','b--','c--','m--','g--', '*k'])   

error_values = get_error(T, z0, v, zt, dt_values, 1, 1, style)
